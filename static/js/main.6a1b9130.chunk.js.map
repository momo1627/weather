{"version":3,"sources":["pages/autoSearchComplete/predictions.jsx","pages/widgets/currentWeather.jsx","pages/widgets/forecastWeather.jsx","pages/widgets/googleMap.js","pages/autoSearchComplete/alert.jsx","pages/autoSearchComplete/autoSearchComplete.jsx","serviceWorker.js","index.js","pages/weatherApp.jsx"],"names":["Prediction","props","predictions","select","elements","map","item","react_default","a","createElement","className","key","id","onClick","name","style","zIndex","Current","condition","text","icon","localtime","temp","temp_c","humidity","wind","wind_mph","src","alt","Forecast","element","days","data","forecastday","date_epoch","date","day","avgtemp_c","slice","GoogleMap","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateMapContainerRef","ref","mapContainer","state","updateMap","prevProps","address","encodeURIComponent","requestUri","concat","axios","get","_this2","trim","getGeocode","then","response","results","length","location","geometry","setState","lat","latLng","google","maps","LatLng","lng","Map","setCenter","setZoom","marker","Marker","position","React","PureComponent","Alert","click","clear","API_Key","Weather","currentLocation","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","address_components","types","search","short_name","autoSearch","input","i","objectSpread","isPredicting","handleChange","e","target","value","fetch","method","json","handleSelect","defineProperty","handleSubmit","isError","isLoading","currentWeather","current","foreCastWeather","forecast","moment","format","handleClear","handleAlert","type","onChange","placeholder","assign","height","googleMap_GoogleMap","action","Component","Boolean","window","hostname","match","ReactDOM","render","autoSearchComplete_Weather","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a1b9130.chunk.js","sourcesContent":["import React from 'react'\r\nexport default function Prediction(props){\r\n    const predictions = props.predictions;\r\n    const select = props.select;\r\n    const elements = (predictions||[]).map(item=>{\r\n        return (\r\n            <button className='list-group-item list-group-item-action bg-warning ' key={item.id} onClick={()=>{select(item)}}>\r\n                {item.name}\r\n            </button>\r\n        )\r\n    })\r\n    return (\r\n        <div className='position-absolute list-group t-2' style={{'zIndex':'1000'}}>\r\n            {elements}\r\n        </div>\r\n        \r\n        )\r\n        \r\n}\r\n","import React from 'react'\r\nexport default function Current(props){\r\n    const condition = props.condition || {\r\n        text:'condition',\r\n        icon:''\r\n    }\r\n    const localtime = props.localtime || 'date'\r\n    const temp = props.temp_c || ''\r\n    const humidity = props.humidity || ''\r\n    const wind = props.wind_mph\r\n    return(\r\n                <div className='bg-info border border-primary rounded col-md-8 p-3'>\r\n                <div className='text-center '>{localtime}</div>\r\n                <div className='row h-100 align-items-center text-center'>\r\n                <div className='col-md '>\r\n                <div className='h2'>{temp}&#8451;</div>\r\n                <div className='row'>\r\n                    <div className='col'>\r\n                    <div>Humidity</div>   \r\n                    <div>{humidity}%</div> \r\n                        </div>\r\n                    <div className='col'>\r\n                    <div>Wind</div>    \r\n                    <div>{wind}K/M</div>\r\n                        </div>\r\n                </div>\r\n                </div>\r\n                <div className='col-md  '>\r\n                <img src={condition.icon} alt=\"\"/>\r\n                <div className=''>{condition.text}</div>\r\n                </div>\r\n               </div>\r\n            </div>\r\n                    \r\n    )\r\n}","import React from 'react'\r\nexport default function Forecast(props){\r\n    const days = props.days\r\n    let data = props.forecastday || [{\r\n        date_epoch:1,\r\n        date:'date',\r\n        day:{\r\n            avgtemp_c:'',\r\n            condition:{\r\n                text:'condition',\r\n                icon:''\r\n        }\r\n        }\r\n        }]\r\n    data = data.slice(0,days)\r\n    let element;\r\n    if (data){\r\n        element = data.map((item)=>{\r\n            return(\r\n                <div className='col-8 col-sm-4 col-lg-2  col-xl-2 mx-auto m-1  small bg-light text-dark border border-secondary rounded' key={item.date_epoch}>\r\n                    <div className='p-1'>{item.date}</div >\r\n                    <img src={item.day.condition.icon} alt=\"\"/>\r\n                    <div className='p-1 h4'>{item.day.avgtemp_c}&#8451;</div >\r\n                    <div className='p-1'>{item.day.condition.text}</div >\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    return(\r\n        <div className='text-center col'>\r\n            <div className='row p-2'>\r\n                {element}\r\n            </div>\r\n        </div>\r\n    )\r\n}","/* eslint-disable no-undef */\r\nimport React from \"react\";\r\nimport axios from 'axios'\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst API_KEY = \"AIzaSyC0W_7Xof88qi51CnXgWEJVSOxyJFeKzME \";\r\n\r\nexport default class GoogleMap extends React.PureComponent {\r\n  constructor(){\r\n    super();\r\n    this.state = {}\r\n  }\r\n  componentDidMount() {\r\n    this.updateMap();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.address !== this.props.address) {\r\n      this.updateMap();\r\n    }\r\n  }\r\n\r\n  getGeocode() {\r\n    const address = encodeURIComponent(this.props.address);\r\n    const requestUri = `https://maps.googleapis.com/maps/api/geocode/json?address=${address}&key=${API_KEY}`;\r\n\r\n    return axios.get(requestUri);\r\n  }\r\n\r\n  updateMap() {\r\n    const addressToSearch = (this.props.address || \"\").trim();\r\n    if (!addressToSearch) {\r\n      return;\r\n    }\r\n    this.getGeocode().then(response => {\r\n      const { results } = response.data;\r\n      if (results.length) {\r\n        const {\r\n          geometry: { location }\r\n        } = results[0];\r\n        this.setState({location:location.lat})\r\n        const latLng = new google.maps.LatLng(location.lat, location.lng);\r\n        this.map = new google.maps.Map(this.mapContainer);\r\n        this.map.setCenter(latLng);\r\n        this.map.setZoom(8);\r\n        this.marker = new google.maps.Marker({\r\n          map: this.map,\r\n          position: latLng\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  updateMapContainerRef = ref => {\r\n    this.mapContainer = ref;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n        <div\r\n        ref={this.updateMapContainerRef}\r\n        className='w-80 h-100 border rounded'\r\n        />\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nGoogleMap.propTypes = {\r\n  address: PropTypes.string\r\n};\r\n\r\n","import React from 'react'\r\nexport default function Alert(props){\r\n    const ok = ()=>{\r\n        props.click()}\r\n    const clear = ()=>{\r\n        props.clear()\r\n    }\r\n    return(\r\n        <div className='position-absolute border border-primary bg-danger border rounded border-danger p-3' style={{'zIndex':'1001'}}>\r\n            <div className='h4 text-center'>alert</div>\r\n            <div className='h5'>type or select correct location name</div>\r\n            <div className='d-flex justify-content-between'>\r\n                <button className='btn btn-warning ' onClick={ok}>ok</button>\r\n                <button className='btn btn-warning' onClick={clear}>clear</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport Predictions from './predictions'\r\nimport Current from '../widgets/currentWeather'\r\nimport Forecast from '../widgets/forecastWeather';\r\nimport GoogleMap from '../widgets/googleMap'\r\nimport Alert from './alert'\r\nimport moment from 'moment'\r\nimport axios from 'axios'\r\nconst API_Key = '2e46c90e0de84f11b2982226191302';\r\nexport default class Weather extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            search:'',\r\n            autoSearch:{\r\n                input: '',\r\n                predictions : [],\r\n                isPredicting : false,\r\n            },\r\n            location:{\r\n                localtime:'localtime'\r\n            },\r\n            currentWeather:{},\r\n            foreCastWeather:{},\r\n            isLoading:false,   \r\n            days:1,        \r\n            isError:false,\r\n        }\r\n    }\r\n    currentLocation =()=>{\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((position)=>{\r\n                var coords = position.coords;\r\n                axios.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${coords.latitude},${coords.longitude}&key=AIzaSyC0W_7Xof88qi51CnXgWEJVSOxyJFeKzME`)\r\n                .then(response=>{return response.data})\r\n                .then(response=>{ \r\n                    return response.results[0].address_components})\r\n                .then(response=>{\r\n                    \r\n                    response.map(item=>{\r\n                        if(item.types[0] === \"administrative_area_level_2\"){\r\n                            this.setState({\r\n                                search : item.short_name,\r\n                                autoSearch:{\r\n                                    input: item.short_name\r\n                                }\r\n                            })\r\n                            return \r\n                        }\r\n                    })\r\n                })\r\n            });\r\n          } \r\n    }\r\n    select = (item) =>{\r\n        this.state.autoSearch.predictions.map(i=>{\r\n            if(i.id === item.id ){\r\n                this.setState({\r\n                    autoSearch:{\r\n                        ...this.state.autoSearch,\r\n                        input:item.name,\r\n                        isPredicting:false,\r\n                        predictions:[],\r\n                    },\r\n                    search:item.name\r\n                })\r\n            }\r\n        })\r\n        \r\n    }\r\n    handleChange = (e)=>{\r\n        const input = e.target.value;\r\n        this.setState({\r\n            search:'',\r\n            autoSearch:{\r\n                ...this.state.autoSearch,\r\n                input:input,\r\n                isPredicting:true,\r\n            },\r\n        })\r\n        if (input !== ''){\r\n            fetch(`http://api.apixu.com/v1/search.json?key=${API_Key}&q=${input}`,{method:\"GET\"})\r\n            .then(\r\n                (data)=>{return data.json()}\r\n            ).then(\r\n                (data)=>{\r\n                    this.setState({\r\n                        autoSearch:{\r\n                            ...this.state.autoSearch,\r\n                            predictions:data\r\n                        }}\r\n                        )\r\n                })\r\n        }\r\n        \r\n    }\r\n    handleSelect = (e)=>{\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n        this.setState({\r\n            [name]:value\r\n        })\r\n    }\r\n    handleSubmit = ()=>{\r\n        if(this.state.search === \"\" || this.state.autoSearch.input === '' || this.state.search !==this.state.autoSearch.input){\r\n            this.setState({\r\n                isError:true,\r\n            })\r\n            return false\r\n        }\r\n        const input = this.state.search;\r\n        fetch(`http://api.apixu.com/v1/forecast.json?key=${API_Key}&q=${input}&days=5`,{method:\"GET\"})\r\n        .then(\r\n            (data)=>{return data.json()}\r\n        ).then(\r\n            (data)=>{\r\n                this.setState({\r\n                    isLoading:true,\r\n                    currentWeather:{\r\n                        ...data.current\r\n                    },\r\n                    foreCastWeather:{\r\n                        ...data.forecast\r\n                    },\r\n                    localtime:moment(data.location.localtime).format('LLLL')\r\n                }\r\n                )\r\n            })\r\n    }\r\n    handleClear = ()=>{\r\n        this.setState({\r\n            isError:false,\r\n            autoSearch:{\r\n                input:'',\r\n                predictions:[],\r\n                isPredicting:false\r\n            }\r\n        })\r\n    }\r\n    handleAlert = ()=>{\r\n        this.setState({\r\n            isError:false\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n        <div className='border border-black container rounded mt-2  p-4 bg-primary text-white' > \r\n            <div className='row p-2'>\r\n                <h4 className=''>Weather App</h4>\r\n                <button className=\"btn btn-light w-10 ml-2 \" onClick={this.currentLocation} >current location</button>\r\n            </div> \r\n            <div className='row position-relative'>\r\n                <input className=\"col-md-8 form-control\" type=\"text\" value={this.state.autoSearch.input} onChange={this.handleChange} placeholder=\"Enter Location\"/>\r\n                <div className='col-md-4 d-flex justify-content-around mt-1 mt-md-0'>\r\n                <input className=\"btn btn-success w-50 \" type=\"button\" value=\"Search\" onClick={this.handleSubmit} />\r\n                <input className=\"btn btn-success w-50 ml-1\" type=\"button\" value=\"Clear\" onClick={this.handleClear} />\r\n                {this.state.isError && <Alert clear={this.handleClear} click={this.handleAlert}/>}\r\n                </div>\r\n            </div>\r\n            <div className='w-80'>\r\n                {this.state.autoSearch.isPredicting  &&  <Predictions  {...this.state.autoSearch} select={this.select}/>}\r\n            </div>\r\n            <div className='row mt-1 align-items-center' >\r\n                <Current {...this.state.currentWeather} localtime={this.state.localtime}  />\r\n                <div className='col-md-4 p-1' style={{'height':'160px'}} >\r\n                    <GoogleMap address={this.state.search}/>\r\n                </div>\r\n                <div className='col-md-12 mt-2 bg-secondary border rounded' >\r\n                <div className='row'>\r\n                <form action=\"\" className='col-md-2' >\r\n                    <label >Select future days</label>\r\n                    <select  className='form-control form-control-sm' name=\"days\" id=\"\" onChange={this.handleSelect}>\r\n                        <option value=\"1\">1</option>\r\n                        <option value=\"2\">2</option>\r\n                        <option value=\"3\">3</option>\r\n                        <option value=\"4\">4</option>\r\n                        <option value=\"5\">5</option>\r\n                    </select>\r\n                </form>\r\n                <Forecast {...this.state.foreCastWeather} days={this.state.days} />\r\n                </div>\r\n            </div>\r\n            </div>\r\n\r\n            \r\n        </div>\r\n        )        \r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/weatherApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\r\nimport AutoSearch from './autoSearchComplete/autoSearchComplete'\r\nexport default function Weather(){\r\n    return(\r\n        <div>\r\n            <AutoSearch />            \r\n        </div>\r\n    )\r\n}"],"sourceRoot":""}